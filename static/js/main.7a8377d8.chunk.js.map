{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","state","action","type","transactions","filter","transaction","id","payload","initialState","text","amount","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","Transaction","sign","Math","abs","onClick","TransactionList","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a8377d8.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Header = () => {\r\n    return(\r\n        <h2 className=\"text-center mt-20 mb-20 color-dark-green\">\r\n            Expense tracker\r\n        </h2>\r\n    )\r\n}","export default (state, action) => {\r\n    switch(action.type){\r\n        case 'DELETE_TRANSACTION':\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n            }\r\n            case 'ADD_TRANSACTION':\r\n                return {\r\n                    ...state,\r\n                    transactions: [action.payload, ...state.transactions]\r\n                    //spread operator\r\n                }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react'\r\nimport AppReducer from './AppReducer'\r\n\r\n//Initial state\r\nconst initialState = {\r\n    transactions: [\r\n        {id: 1, text: 'Flower', amount: -20},\r\n        {id: 2, text: 'Salary', amount: 300},\r\n        {id: 3, text: 'Book', amount: -10},\r\n        {id: 4, text: 'Camera', amount: 150},\r\n    ]\r\n}\r\n\r\n// Create context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n// Provider component\r\nexport const GlobalProvider = ({children}) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    // Actions\r\n    function deleteTransaction(id){\r\n        dispatch({\r\n            type: 'DELETE_TRANSACTION',\r\n            payload: id\r\n        });\r\n    }\r\n\r\n    function addTransaction(transaction){\r\n        dispatch({\r\n            type: 'ADD_TRANSACTION',\r\n            payload: transaction\r\n        });\r\n    }\r\n\r\n    return (<GlobalContext.Provider value={{\r\n        transactions: state.transactions,\r\n        deleteTransaction,\r\n        addTransaction\r\n    }}>\r\n        {children}\r\n    </GlobalContext.Provider>);\r\n}","import React, { useContext } from 'react'\r\nimport {GlobalContext} from '../context/GlobalState'\r\n\r\nexport const Balance = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n    const total = amounts.reduce((acc, item) => (acc +- item), 0).toFixed(2);\r\n\r\n    return(\r\n        <div>\r\n            <h4 className=\"color-dark-green mb-10\">Your Balance</h4>\r\n            <h2 className={(total < 0 ? \"color-red\":\"color-green\") + \" box mb-30\"}>${total}</h2>\r\n        </div>\r\n    )\r\n}","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const IncomeExpenses = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map( transaction => transaction.amount);\r\n\r\n    const income = amounts\r\n    .filter(item => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n    const expense = (\r\n        amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) * -1)\r\n        .toFixed(2);\r\n        \r\n    return(\r\n        <div className=\"inc-exp-container\">\r\n            <div className=\"mb-30\">\r\n                <h4 className=\"color-dark-green mb-10\">Income</h4>\r\n                <p className=\"color-green\">+{income}</p>\r\n            </div>\r\n            <div className=\"mb-30\">\r\n                <h4 className=\"color-dark-green mb-10\">Expense</h4>\r\n                <p className=\"color-red\">-{expense}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { useContext } from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const Transaction = ({ transaction }) =>{\r\n    const { deleteTransaction } = useContext(GlobalContext);\r\n    const sign = transaction.amount < 0 ? '-' : '+';\r\n\r\n    return(\r\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\r\n            {transaction.text} <span>{sign}${Math.abs(transaction.amount)}</span>\r\n            <button className=\"delete-btn color-red\" onClick={() => deleteTransaction(transaction.id)}>x</button>\r\n        </li> \r\n    )\r\n}","import React, { useContext } from 'react'\r\nimport { Transaction } from './Transaction'\r\nimport { GlobalContext } from '../context/GlobalState'\r\n\r\nexport const TransactionList = () => {\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    //console.log(context)\r\n\r\n    return(\r\n        <div>\r\n            <h3 className=\"color-dark-green mb-10\">History</h3>\r\n            <ul className=\"transaction-list mb-30\">\r\n            {transactions.map(transaction => (<Transaction key={transaction.id} transaction={transaction}/>))}\r\n            </ul>\r\n\r\n            <hr />\r\n        </div>\r\n    )\r\n}","import React, {useState, useContext} from 'react'\r\nimport { GlobalContext } from '../context/GlobalState';\r\n\r\nexport const AddTransaction = () => {\r\n    const [text, setText] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n\r\n    const { addTransaction } = useContext(GlobalContext);\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const newTransaction = {\r\n            id: Math.floor(Math.random() * 100000000),\r\n            text,\r\n            amount: +amount //turn to int\r\n        }\r\n\r\n        addTransaction(newTransaction);\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <h2 className=\"text-center mt-50 color-dark-green\">\r\n                Add Transaction\r\n            </h2>\r\n            <form onSubmit={onSubmit}>\r\n                <div>\r\n                    <label htmlFor=\"text\" className=\"mb-10 color-dark-green\">Title</label>\r\n                    <input type=\"text\" className=\"input w-100 mb-30\" value={text} onChange={(e) => setText(e.target.value)} placeholder=\"Enter text...\" />\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"amount\" className=\"mb-10 color-dark-green\">\r\n                        Amount<br/>\r\n                        (negative - expense, positive - income)\r\n                    </label>\r\n                    <input type=\"number\" className=\"input mb-30\" placeholder=\"Enter amount...\" value={amount} onChange={(e) => setAmount(e.target.value)} />                  \r\n                </div>\r\n                <button className=\"btn w-100 mb-50\">Add Transaction</button>\r\n            </form>\r\n        </div>\r\n    )\r\n} ","import './App.css';\r\nimport { Header } from './components/Header';\r\nimport { Balance } from './components/Balance';\r\nimport { IncomeExpenses } from './components/IncomeExpenses'\r\nimport { TransactionList } from './components/TransactionList'\r\nimport { AddTransaction } from './components/AddTransaction'\r\n\r\nimport { GlobalProvider } from './context/GlobalState'\r\n\r\nfunction App() {\r\n  return (\r\n    <GlobalProvider>\r\n      <div className=\"wrapper\">\r\n        <div className=\"container\">\r\n          <Header />\r\n            <Balance />\r\n            <IncomeExpenses />\r\n            <TransactionList />\r\n            <AddTransaction />\r\n        </div>\r\n      </div>\r\n    </GlobalProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}